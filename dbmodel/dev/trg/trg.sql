
/*
This file is part of drain project software
The program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This version of Giswater is provided by Giswater Association
*/

-- ----------------------------------------
-- TRIGGERS FOR SYS GPKG TABLESPACE
-- ----------------------------------------

CREATE TRIGGER "trigger_delete_feature_count_sys_selector" AFTER DELETE ON "sys_selector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('sys_selector'); END;
CREATE TRIGGER "trigger_delete_feature_count_selector_scenario" AFTER DELETE ON "selector_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_scenario'); END;
CREATE TRIGGER "trigger_delete_feature_count_selector_sector" AFTER DELETE ON "selector_sector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_sector'); END;
CREATE TRIGGER "trigger_delete_feature_count_config_param_user" AFTER DELETE ON "config_param_user" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('config_param_user'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_scenario" AFTER DELETE ON "cat_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_scenario'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_curve" AFTER DELETE ON "inp_curve" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_curve'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_curve_value" AFTER DELETE ON "inp_curve_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_curve_value'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_timeseries" AFTER DELETE ON "inp_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_timeseries'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_timeseries_value" AFTER DELETE ON "inp_timeseries_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_timeseries_value'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_landuses" AFTER DELETE ON "cat_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_landuses'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_grate" AFTER DELETE ON "cat_grate" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_grate'); END;

CREATE TRIGGER "trigger_delete_feature_count_sector" AFTER DELETE ON "sector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('sector'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_polygon" AFTER DELETE ON "elem_polygon"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_polygon'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_manzone" AFTER DELETE ON "elem_manzone"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_manzone'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_losszone" AFTER DELETE ON "elem_losszone"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_losszone'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_roof" AFTER DELETE ON "elem_roof" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_roof'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_tin" AFTER DELETE ON "elem_tin"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_tin'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_edge" AFTER DELETE ON "elem_edge" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_edge'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_vertex" AFTER DELETE ON "elem_vertex" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_vertex'); END;
CREATE TRIGGER "trigger_delete_feature_count_elem_raingage" AFTER DELETE ON "elem_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('elem_raingage'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_conduit" AFTER DELETE ON "inp_conduit" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_conduit'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_subcatchment" AFTER DELETE ON "inp_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_subcatchment'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_outlet" AFTER DELETE ON "inp_outlet" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_outlet'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_orifice" AFTER DELETE ON "inp_orifice" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_orifice'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_weir" AFTER DELETE ON "inp_weir" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_weir'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_pump" AFTER DELETE ON "inp_pump" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_pump'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_outfall" AFTER DELETE ON "inp_outfall" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_outfall'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_divider" AFTER DELETE ON "inp_divider" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_divider'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_storage" AFTER DELETE ON "inp_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_storage'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_junction" AFTER DELETE ON "inp_junction" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_junction'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_raingage" AFTER DELETE ON "inp_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_raingage'); END;
CREATE TRIGGER "trigger_delete_feature_count_link" AFTER DELETE ON "link" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('link'); END;
CREATE TRIGGER "trigger_delete_feature_count_gully" AFTER DELETE ON "gully" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('gully'); END;

CREATE TRIGGER "trigger_insert_feature_count_sys_selector" AFTER INSERT ON "sys_selector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('sys_selector'); END;
CREATE TRIGGER "trigger_insert_feature_count_selector_sector" AFTER INSERT ON "selector_sector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_sector'); END;
CREATE TRIGGER "trigger_insert_feature_count_selector_scenarior" AFTER INSERT ON "selector_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_scenario'); END;
CREATE TRIGGER "trigger_insert_feature_count_config_param_user" AFTER INSERT ON "config_param_user" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('config_param_user'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_scenario" AFTER INSERT ON "cat_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_scenario'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_curve" AFTER INSERT ON "inp_curve" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_curve'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_curve_value" AFTER INSERT ON "inp_curve_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_curve_value'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_timeseries" AFTER INSERT ON "inp_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_timeseries'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_timeseries_value" AFTER INSERT ON "inp_timeseries_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_timeseries_value'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_landuses" AFTER INSERT ON "cat_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_landuses'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_grate" AFTER INSERT ON "cat_grate" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_grate'); END;

CREATE TRIGGER "trigger_insert_feature_count_sector" AFTER INSERT ON "sector" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('sector'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_polygon" AFTER INSERT ON "elem_polygon"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_polygon'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_manzone" AFTER INSERT ON "elem_manzone"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_manzone'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_losszone" AFTER INSERT ON "elem_losszone" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_losszone'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_roof" AFTER INSERT ON "elem_roof" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_roof'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_tin" AFTER INSERT ON "elem_tin"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_tin'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_edge" AFTER INSERT ON "elem_edge" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_edge'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_vertex" AFTER INSERT ON "elem_vertex" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_vertex'); END;
CREATE TRIGGER "trigger_insert_feature_count_elem_raingage" AFTER INSERT ON "elem_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('elem_raingage'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_conduit" AFTER INSERT ON "inp_conduit" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_conduit'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_subcatchment" AFTER INSERT ON "inp_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_subcatchment'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_outlet" AFTER INSERT ON "inp_outlet" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_outlet'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_orifice" AFTER INSERT ON "inp_orifice" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_orifice'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_weir" AFTER INSERT ON "inp_weir" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_weir'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_pump" AFTER INSERT ON "inp_pump" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_pump'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_outfall" AFTER INSERT ON "inp_outfall" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_outfall'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_divider" AFTER INSERT ON "inp_divider" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_divider'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_storage" AFTER INSERT ON "inp_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_storage'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_junction" AFTER INSERT ON "inp_junction" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_junction'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_raingage" AFTER INSERT ON "inp_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_raingage'); END;
CREATE TRIGGER "trigger_insert_feature_count_link" AFTER INSERT ON "link" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('link'); END;
CREATE TRIGGER "trigger_insert_feature_count_gully" AFTER INSERT ON "gully" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('gully'); END;


CREATE TRIGGER "rtree_sector_geom_delete" AFTER DELETE ON "sector" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_sector_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_polygon_geom_delete" AFTER DELETE ON "elem_polygon" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_polygon_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_manzone_geom_delete" AFTER DELETE ON "elem_manzone" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_manzone_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_losszone_geom_delete" AFTER DELETE ON "elem_losszone" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_losszone_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_roof_geom_delete" AFTER DELETE ON "elem_roof" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_tin_geom_delete" AFTER DELETE ON "elem_tin" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_tin_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_edge_geom_delete" AFTER DELETE ON "elem_edge" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_edge_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_vertex_geom_delete" AFTER DELETE ON "elem_vertex" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_vertex_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_raingage_geom_delete" AFTER DELETE ON "elem_raingage" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_elem_raingage_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_inp_conduit_geom_delete" AFTER DELETE ON "inp_conduit" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_delete" AFTER DELETE ON "inp_subcatchment" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outlet_geom_delete" AFTER DELETE ON "inp_outlet" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_orifice_geom_delete" AFTER DELETE ON "inp_orifice" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_weir_geom_delete" AFTER DELETE ON "inp_weir" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_pump_geom_delete" AFTER DELETE ON "inp_pump" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outfall_geom_delete" AFTER DELETE ON "inp_outfall" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_divider_geom_delete" AFTER DELETE ON "inp_divider" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_storage_geom_delete" AFTER DELETE ON "inp_storage" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_junction_geom_delete" AFTER DELETE ON "inp_junction" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_raingage_geom_delete" AFTER DELETE ON "inp_raingage" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_link_geom_delete" AFTER DELETE ON "link" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_gully_geom_delete" AFTER DELETE ON "gully" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; END;

CREATE TRIGGER "rtree_sector_geom_insert" AFTER INSERT ON "sector" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_sector_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_polygon_geom_insert" AFTER INSERT ON "elem_polygon" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_polygon_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_manzone_geom_insert" AFTER INSERT ON "elem_manzone" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_manzone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_losszone_geom_insert" AFTER INSERT ON "elem_losszone" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_losszone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_roof_geom_insert" AFTER INSERT ON "elem_roof" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_tin_geom_insert" AFTER INSERT ON "elem_tin" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_edge_geom_insert" AFTER INSERT ON "elem_edge" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_edge_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_vertex_geom_insert" AFTER INSERT ON "elem_vertex" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_vertex_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_elem_raingage_geom_insert" AFTER INSERT ON "elem_raingage" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_elem_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_conduit_geom_insert" AFTER INSERT ON "inp_conduit" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_insert" AFTER INSERT ON "inp_subcatchment" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_outlet_geom_insert" AFTER INSERT ON "inp_outlet" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_orifice_geom_insert" AFTER INSERT ON "inp_orifice" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_weir_geom_insert" AFTER INSERT ON "inp_weir" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_pump_geom_insert" AFTER INSERT ON "inp_pump" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_outfall_geom_insert" AFTER INSERT ON "inp_outfall" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_divider_geom_insert" AFTER INSERT ON "inp_divider" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_storage_geom_insert" AFTER INSERT ON "inp_storage" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_junction_geom_insert" AFTER INSERT ON "inp_junction" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_raingage_geom_insert" AFTER INSERT ON "inp_raingage" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_link_geom_insert" AFTER INSERT ON "link" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_gully_geom_insert" AFTER INSERT ON "gully" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;

CREATE TRIGGER "rtree_sector_geom_update1" AFTER UPDATE OF "geom" ON "sector" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_sector_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_polygon_geom_update1" AFTER UPDATE OF "geom" ON "elem_polygon" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_polygon_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_manzone_geom_update1" AFTER UPDATE OF "geom" ON "elem_manzone" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_manzone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_losszone_geom_update1" AFTER UPDATE OF "geom" ON "elem_losszone" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_losszone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_roof_geom_update1" AFTER UPDATE OF "geom" ON "elem_roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_tin_geom_update1" AFTER UPDATE OF "geom" ON "elem_tin" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_edge_geom_update1" AFTER UPDATE OF "geom" ON "elem_edge" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_edge_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_vertex_geom_update1" AFTER UPDATE OF "geom" ON "elem_vertex" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_vertex_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_raingage_geom_update1" AFTER UPDATE OF "geom" ON "elem_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_elem_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update1" AFTER UPDATE OF "geom" ON "inp_conduit" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update1" AFTER UPDATE OF "geom" ON "inp_subcatchment" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update1" AFTER UPDATE OF "geom" ON "inp_outlet" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update1" AFTER UPDATE OF "geom" ON "inp_orifice" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_weir_geom_update1" AFTER UPDATE OF "geom" ON "inp_weir" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_pump_geom_update1" AFTER UPDATE OF "geom" ON "inp_pump" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update1" AFTER UPDATE OF "geom" ON "inp_outfall" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_divider_geom_update1" AFTER UPDATE OF "geom" ON "inp_divider" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_storage_geom_update1" AFTER UPDATE OF "geom" ON "inp_storage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_junction_geom_update1" AFTER UPDATE OF "geom" ON "inp_junction" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update1" AFTER UPDATE OF "geom" ON "inp_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_link_geom_update1" AFTER UPDATE OF "geom" ON "link" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_gully_geom_update1" AFTER UPDATE OF "geom" ON "gully" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;

CREATE TRIGGER "rtree_sector_geom_update2" AFTER UPDATE OF "geom" ON "sector" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_sector_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_polygon_geom_update2" AFTER UPDATE OF "geom" ON "elem_polygon" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_polygon_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_manzone_geom_update2" AFTER UPDATE OF "geom" ON "elem_manzone" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_manzone_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_losszone_geom_update2" AFTER UPDATE OF "geom" ON "elem_losszone" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_losszone_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_roof_geom_update2" AFTER UPDATE OF "geom" ON "elem_roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_tin_geom_update2" AFTER UPDATE OF "geom" ON "elem_tin" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_tin_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_edge_geom_update2" AFTER UPDATE OF "geom" ON "elem_edge" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_edge_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_vertex_geom_update2" AFTER UPDATE OF "geom" ON "elem_vertex" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_vertex_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_elem_raingage_geom_update2" AFTER UPDATE OF "geom" ON "elem_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_raingage_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_inp_conduit_geom_update2" AFTER UPDATE OF "geom" ON "inp_conduit" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update2" AFTER UPDATE OF "geom" ON "inp_subcatchment" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outlet_geom_update2" AFTER UPDATE OF "geom" ON "inp_outlet" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_orifice_geom_update2" AFTER UPDATE OF "geom" ON "inp_orifice" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_weir_geom_update2" AFTER UPDATE OF "geom" ON "inp_weir" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_pump_geom_update2" AFTER UPDATE OF "geom" ON "inp_pump" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outfall_geom_update2" AFTER UPDATE OF "geom" ON "inp_outfall" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_divider_geom_update2" AFTER UPDATE OF "geom" ON "inp_divider" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_storage_geom_update2" AFTER UPDATE OF "geom" ON "inp_storage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_junction_geom_update2" AFTER UPDATE OF "geom" ON "inp_junction" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_raingage_geom_update2" AFTER UPDATE OF "geom" ON "inp_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_link_geom_update2" AFTER UPDATE OF "geom" ON "link" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_gully_geom_update2" AFTER UPDATE OF "geom" ON "gully" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; END;

CREATE TRIGGER "rtree_sector_geom_update3" AFTER UPDATE ON "sector" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_sector_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_sector_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_polygon_geom_update3" AFTER UPDATE ON "elem_polygon" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_polygon_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_polygon_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_manzone_geom_update3" AFTER UPDATE ON "elem_manzone" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_manzone_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_manzone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_losszone_geom_update3" AFTER UPDATE ON "elem_losszone" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_losszone_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_losszone_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_roof_geom_update3" AFTER UPDATE ON "elem_roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_roof_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_tin_geom_update3" AFTER UPDATE ON "elem_tin" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_tin_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_edge_geom_update3" AFTER UPDATE ON "elem_edge" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_edge_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_edge_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_vertex_geom_update3" AFTER UPDATE ON "elem_vertex" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_vertex_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_vertex_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_elem_raingage_geom_update3" AFTER UPDATE ON "elem_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_raingage_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_elem_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update3" AFTER UPDATE ON "inp_conduit" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update3" AFTER UPDATE ON"inp_subcatchment" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update3" AFTER UPDATE ON "inp_outlet" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update3" AFTER UPDATE ON "inp_orifice" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_weir_geom_update3" AFTER UPDATE ON "inp_weir" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_pump_geom_update3" AFTER UPDATE ON "inp_pump" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update3" AFTER UPDATE ON "inp_outfall" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_divider_geom_update3" AFTER UPDATE ON "inp_divider" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_storage_geom_update3" AFTER UPDATE ON "inp_storage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_junction_geom_update3" AFTER UPDATE ON "inp_junction" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update3" AFTER UPDATE ON "inp_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_link_geom_update3" AFTER UPDATE ON "link" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_gully_geom_update3" AFTER UPDATE ON "gully" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;

CREATE TRIGGER "rtree_sector_geom_update4" AFTER UPDATE ON "sector" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_sector_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_polygon_geom_update4" AFTER UPDATE ON "elem_polygon" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_polygon_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_manzone_geom_update4" AFTER UPDATE ON "elem_manzone" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_manzone_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_losszone_geom_update4" AFTER UPDATE ON "elem_losszone" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_losszone_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_roof_geom_update4" AFTER UPDATE ON "elem_roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_roof_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_tin_geom_update4" AFTER UPDATE ON "elem_tin" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_tin_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_edge_geom_update4" AFTER UPDATE ON "elem_edge" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_edge_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_vertex_geom_update4" AFTER UPDATE ON "elem_vertex" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_vertex_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_elem_raingage_geom_update4" AFTER UPDATE ON "elem_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_elem_raingage_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update4" AFTER UPDATE ON "inp_conduit" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update4" AFTER UPDATE ON "inp_subcatchment" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update4" AFTER UPDATE ON "inp_outlet" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update4" AFTER UPDATE ON "inp_orifice" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_weir_geom_update4" AFTER UPDATE ON "inp_weir" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_pump_geom_update4" AFTER UPDATE ON "inp_pump" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update4" AFTER UPDATE ON "inp_outfall" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_divider_geom_update4" AFTER UPDATE ON "inp_divider" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_storage_geom_update4" AFTER UPDATE ON "inp_storage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_junction_geom_update4" AFTER UPDATE ON "inp_junction" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update4" AFTER UPDATE ON "inp_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_link_geom_update4" AFTER UPDATE ON "link" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_gully_geom_update4" AFTER UPDATE ON "gully" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id IN (OLD."fid", NEW."fid"); END;