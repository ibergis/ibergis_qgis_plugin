
/*
This file is part of drain project software
The program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This version of Giswater is provided by Giswater Association
*/

-- ---------------------------------
-- TRIGGERS FOR SYS GPKG TABLESPACE
-- ---------------------------------

CREATE TRIGGER "trigger_delete_feature_count_selector_scenario" AFTER DELETE ON "selector_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_scenario'); END;
CREATE TRIGGER "trigger_delete_feature_count_config_param_user" AFTER DELETE ON "config_param_user" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('config_param_user'); END;
CREATE TRIGGER "trigger_delete_feature_count_config_csv" AFTER DELETE ON "config_csv" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('config_csv'); END;
CREATE TRIGGER "trigger_delete_feature_count_config_typevalue" AFTER DELETE ON "config_typevalue" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('config_typevalue'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_bscenario" AFTER DELETE ON "cat_bscenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_bscenario'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_file" AFTER DELETE ON "cat_file" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_file'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_arc" AFTER DELETE ON "cat_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_arc'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_transects" AFTER DELETE ON "cat_transects" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_transects'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_curve" AFTER DELETE ON "cat_curve" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_curve'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_curve_value" AFTER DELETE ON "cat_curve_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_curve_value'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_timeseries" AFTER DELETE ON "cat_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_timeseries'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_timeseries_value" AFTER DELETE ON "cat_timeseries_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_timeseries_value'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_landuses" AFTER DELETE ON "cat_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_landuses'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_grate" AFTER DELETE ON "cat_grate" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_grate'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_pattern" AFTER DELETE ON "cat_pattern" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_pattern'); END;
CREATE TRIGGER "trigger_delete_feature_count_cat_controls" AFTER DELETE ON "cat_controls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('cat_controls'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_files" AFTER DELETE ON "inp_files" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_files'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_arc" AFTER DELETE ON "rpt_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_arc'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_arcflow_sum" AFTER DELETE ON "rpt_arcflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_arcflow_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_arcpolload_sum" AFTER DELETE ON "rpt_arcpolload_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_arcpolload_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_arcpollutant_sum" AFTER DELETE ON "rpt_arcpollutant_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_arcpollutant_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_cat_result" AFTER DELETE ON "rpt_cat_result" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_cat_result'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_condsurcharge_sum" AFTER DELETE ON "rpt_condsurcharge_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_condsurcharge_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_continuity_errors" AFTER DELETE ON "rpt_continuity_errors" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_continuity_errors'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_control_actions_taken" AFTER DELETE ON "rpt_control_actions_taken" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_control_actions_taken'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_critical_elements" AFTER DELETE ON "rpt_critical_elements" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_critical_elements'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_flowclass_sum" AFTER DELETE ON "rpt_flowclass_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_flowclass_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_flowrouting_cont" AFTER DELETE ON "rpt_flowrouting_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_flowrouting_cont'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_groundwater_cont" AFTER DELETE ON "rpt_groundwater_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_groundwater_cont'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_high_conterrors" AFTER DELETE ON "rpt_high_conterrors" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_high_conterrors'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_high_flowinest_ind" AFTER DELETE ON "rpt_high_flowinest_ind" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_high_flowinest_ind'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_instability_index" AFTER DELETE ON "rpt_instability_index" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_instability_index'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_lidperformance_sum" AFTER DELETE ON "rpt_lidperformance_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_lidperformance_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_node" AFTER DELETE ON "rpt_node" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_node'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_nodedepth_sum" AFTER DELETE ON "rpt_nodedepth_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_nodedepth_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_nodeflooding_sum" AFTER DELETE ON "rpt_nodeflooding_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_nodeflooding_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_nodeinflow_sum" AFTER DELETE ON "rpt_nodeinflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_nodeinflow_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_nodesurcharge_sum" AFTER DELETE ON "rpt_nodesurcharge_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_nodesurcharge_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_outfallflow_sum" AFTER DELETE ON "rpt_outfallflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_outfallflow_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_outfallload_sum" AFTER DELETE ON "rpt_outfallload_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_outfallload_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_pumping_sum" AFTER DELETE ON "rpt_pumping_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_pumping_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_qualrouting_cont" AFTER DELETE ON "rpt_qualrouting_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_qualrouting_cont'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_rainfall_dep" AFTER DELETE ON "rpt_rainfall_dep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_rainfall_dep'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_routing_timestep" AFTER DELETE ON "rpt_routing_timestep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_routing_timestep'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_runoff_qual" AFTER DELETE ON "rpt_runoff_qual" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_runoff_qual'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_runoff_quant" AFTER DELETE ON "rpt_runoff_quant" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_runoff_quant'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_storagevol_sum" AFTER DELETE ON "rpt_storagevol_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_storagevol_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_subcatchment" AFTER DELETE ON "rpt_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_subcatchment'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_subcatchrunoff_sum" AFTER DELETE ON "rpt_subcatchrunoff_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_subcatchrunoff_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_subcatchwashoff_sum" AFTER DELETE ON "rpt_subcatchwashoff_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_subcatchwashoff_sum'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_summary_arc" AFTER DELETE ON "rpt_summary_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_summary_arc'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_summary_crossection" AFTER DELETE ON "rpt_summary_crossection" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_summary_crossection'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_summary_node" AFTER DELETE ON "rpt_summary_node" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_summary_node'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_summary_raingage" AFTER DELETE ON "rpt_summary_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_summary_raingage'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_summary_subcatchment" AFTER DELETE ON "rpt_summary_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_summary_subcatchment'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_timestep_critelem" AFTER DELETE ON "rpt_timestep_critelem" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_timestep_critelem'); END;
CREATE TRIGGER "trigger_delete_feature_count_rpt_warning_summary" AFTER DELETE ON "rpt_warning_summary" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('rpt_warning_summary'); END;
CREATE TRIGGER "trigger_delete_feature_count_selector_rpt_compare" AFTER DELETE ON "selector_rpt_compare" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_rpt_compare'); END;
CREATE TRIGGER "trigger_delete_feature_count_selector_rpt_compare_tstep" AFTER DELETE ON "selector_rpt_compare_tstep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_rpt_compare_tstep'); END;
CREATE TRIGGER "trigger_delete_feature_count_selector_rpt_main" AFTER DELETE ON "selector_rpt_main" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('selector_rpt_main'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_conduits" INSTEAD OF DELETE ON "vi_conduits" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_conduits'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_subcatchments" INSTEAD OF DELETE ON "vi_subcatchments" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_subcatchments'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_outlets" INSTEAD OF DELETE ON "vi_outlets" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_outlets'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_orifices" INSTEAD OF DELETE ON "vi_orifices" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_orifices'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_weirs" INSTEAD OF DELETE ON "vi_weirs" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_weirs'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_pumps" INSTEAD OF DELETE ON "vi_pumps" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_pumps'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_outfalls" INSTEAD OF DELETE ON "vi_outfalls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_outfalls'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_dividers" INSTEAD OF DELETE ON "vi_dividers" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_dividers'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_storage" INSTEAD OF DELETE ON "vi_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_storage'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_junctions" INSTEAD OF DELETE ON "vi_junctions" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_junctions'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_raingages" INSTEAD OF DELETE ON "vi_raingages" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_raingages'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_curves" INSTEAD OF DELETE ON "vi_curves" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_curves'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_timeseries" INSTEAD OF DELETE ON "vi_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_timeseries'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_patterns" INSTEAD OF DELETE ON "vi_patterns" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_patterns'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_landuses" INSTEAD OF DELETE ON "vi_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_landuses'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_subareas" INSTEAD OF DELETE ON "vi_subareas" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_subareas'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_losses" INSTEAD OF DELETE ON "vi_losses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_losses'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_xsections" INSTEAD OF DELETE ON "vi_xsections" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_xsections'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_dwf" INSTEAD OF DELETE ON "vi_dwf" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_dwf'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_infiltration" INSTEAD OF DELETE ON "vi_infiltration" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_infiltration'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_title" INSTEAD OF DELETE ON "vi_title" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_title'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_files" INSTEAD OF DELETE ON "vi_files" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_files'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_options" INSTEAD OF DELETE ON "vi_options" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_options'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_controls" INSTEAD OF DELETE ON "vi_controls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_controls'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_transects" INSTEAD OF DELETE ON "vi_transects" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_transects'); END;
CREATE TRIGGER "trigger_delete_feature_count_vi_inflows" INSTEAD OF DELETE ON "vi_inflows" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('vi_inflows'); END;

CREATE TRIGGER "trigger_delete_feature_count_ground" AFTER DELETE ON "ground"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('ground'); END;
CREATE TRIGGER "trigger_delete_feature_count_ground_roughness" AFTER DELETE ON "ground_roughness"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('ground_roughness'); END;
CREATE TRIGGER "trigger_delete_feature_count_ground_losses" AFTER DELETE ON "ground_losses"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('ground_losses'); END;
CREATE TRIGGER "trigger_delete_feature_count_roof" AFTER DELETE ON "roof" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('roof'); END;
CREATE TRIGGER "trigger_delete_feature_count_mesh_tin" AFTER DELETE ON "mesh_tin"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('mesh_tin'); END;
CREATE TRIGGER "trigger_delete_feature_count_mesh_roof" AFTER DELETE ON "mesh_roof"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('mesh_roof'); END;
CREATE TRIGGER "trigger_delete_feature_count_mesh_anchor_points" AFTER DELETE ON "mesh_anchor_points" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('mesh_anchor_points'); END;
CREATE TRIGGER "trigger_delete_feature_count_mesh_anchor_lines" AFTER DELETE ON "mesh_anchor_lines" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('mesh_anchor_lines'); END;
CREATE TRIGGER "trigger_delete_feature_count_boundary_conditions" AFTER DELETE ON "boundary_conditions" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('boundary_conditions'); END;
CREATE TRIGGER "trigger_delete_feature_count_link" AFTER DELETE ON "link" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('link'); END;
CREATE TRIGGER "trigger_delete_feature_count_gully" AFTER DELETE ON "gully" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('gully'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_raingage" AFTER DELETE ON "inp_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_raingage'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_conduit" AFTER DELETE ON "inp_conduit" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_conduit'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_subcatchment" AFTER DELETE ON "inp_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_subcatchment'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_outlet" AFTER DELETE ON "inp_outlet" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_outlet'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_orifice" AFTER DELETE ON "inp_orifice" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_orifice'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_weir" AFTER DELETE ON "inp_weir" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_weir'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_pump" AFTER DELETE ON "inp_pump" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_pump'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_outfall" AFTER DELETE ON "inp_outfall" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_outfall'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_divider" AFTER DELETE ON "inp_divider" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_divider'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_storage" AFTER DELETE ON "inp_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_storage'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_junction" AFTER DELETE ON "inp_junction" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_junction'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_dwf" AFTER DELETE ON "inp_dwf" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_dwf'); END;
CREATE TRIGGER "trigger_delete_feature_count_inp_inflow" AFTER DELETE ON "inp_inflow" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count - 1 WHERE lower(table_name) = lower('inp_inflow'); END;


CREATE TRIGGER "trigger_insert_feature_count_selector_scenario" AFTER INSERT ON "selector_scenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_scenario'); END;
CREATE TRIGGER "trigger_insert_feature_count_config_param_user" AFTER INSERT ON "config_param_user" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('config_param_user'); END;
CREATE TRIGGER "trigger_insert_feature_count_config_csv" AFTER INSERT ON "config_csv" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('config_csv'); END;
CREATE TRIGGER "trigger_insert_feature_count_config_typevalue" AFTER INSERT ON "config_typevalue" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('config_typevalue'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_bscenario" AFTER INSERT ON "cat_bscenario" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_bscenario'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_file" AFTER INSERT ON "cat_file" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_file'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_arc" AFTER INSERT ON "cat_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_arc'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_transects" AFTER INSERT ON "cat_transects" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_transects'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_curve" AFTER INSERT ON "cat_curve" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_curve'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_curve_value" AFTER INSERT ON "cat_curve_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_curve_value'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_timeseries" AFTER INSERT ON "cat_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_timeseries'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_timeseries_value" AFTER INSERT ON "cat_timeseries_value" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_timeseries_value'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_landuses" AFTER INSERT ON "cat_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_landuses'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_grate" AFTER INSERT ON "cat_grate" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_grate'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_pattern" AFTER INSERT ON "cat_pattern" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_pattern'); END;
CREATE TRIGGER "trigger_insert_feature_count_cat_controls" AFTER INSERT ON "cat_controls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('cat_controls'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_files" AFTER INSERT ON "inp_files" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_files'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_arc" AFTER INSERT ON "rpt_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_arc'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_arcflow_sum" AFTER INSERT ON "rpt_arcflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_arcflow_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_arcpolload_sum" AFTER INSERT ON "rpt_arcpolload_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_arcpolload_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_arcpollutant_sum" AFTER INSERT ON "rpt_arcpollutant_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_arcpollutant_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_cat_result" AFTER INSERT ON "rpt_cat_result" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_cat_result'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_condsurcharge_sum" AFTER INSERT ON "rpt_condsurcharge_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_condsurcharge_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_continuity_errors" AFTER INSERT ON "rpt_continuity_errors" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_continuity_errors'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_control_actions_taken" AFTER INSERT ON "rpt_control_actions_taken" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_control_actions_taken'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_critical_elements" AFTER INSERT ON "rpt_critical_elements" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_critical_elements'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_flowclass_sum" AFTER INSERT ON "rpt_flowclass_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_flowclass_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_flowrouting_cont" AFTER INSERT ON "rpt_flowrouting_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_flowrouting_cont'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_groundwater_cont" AFTER INSERT ON "rpt_groundwater_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_groundwater_cont'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_high_conterrors" AFTER INSERT ON "rpt_high_conterrors" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_high_conterrors'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_high_flowinest_ind" AFTER INSERT ON "rpt_high_flowinest_ind" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_high_flowinest_ind'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_instability_index" AFTER INSERT ON "rpt_instability_index" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_instability_index'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_lidperformance_sum" AFTER INSERT ON "rpt_lidperformance_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_lidperformance_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_node" AFTER INSERT ON "rpt_node" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_node'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_nodedepth_sum" AFTER INSERT ON "rpt_nodedepth_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_nodedepth_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_nodeflooding_sum" AFTER INSERT ON "rpt_nodeflooding_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_nodeflooding_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_nodeinflow_sum" AFTER INSERT ON "rpt_nodeinflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_nodeinflow_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_nodesurcharge_sum" AFTER INSERT ON "rpt_nodesurcharge_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_nodesurcharge_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_outfallflow_sum" AFTER INSERT ON "rpt_outfallflow_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_outfallflow_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_outfallload_sum" AFTER INSERT ON "rpt_outfallload_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_outfallload_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_pumping_sum" AFTER INSERT ON "rpt_pumping_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_pumping_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_qualrouting_cont" AFTER INSERT ON "rpt_qualrouting_cont" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_qualrouting_cont'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_rainfall_dep" AFTER INSERT ON "rpt_rainfall_dep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_rainfall_dep'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_routing_timestep" AFTER INSERT ON "rpt_routing_timestep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_routing_timestep'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_runoff_qual" AFTER INSERT ON "rpt_runoff_qual" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_runoff_qual'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_runoff_quant" AFTER INSERT ON "rpt_runoff_quant" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_runoff_quant'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_storagevol_sum" AFTER INSERT ON "rpt_storagevol_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_storagevol_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_subcatchment" AFTER INSERT ON "rpt_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_subcatchment'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_subcatchrunoff_sum" AFTER INSERT ON "rpt_subcatchrunoff_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_subcatchrunoff_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_subcatchwashoff_sum" AFTER INSERT ON "rpt_subcatchwashoff_sum" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_subcatchwashoff_sum'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_summary_arc" AFTER INSERT ON "rpt_summary_arc" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_summary_arc'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_summary_crossection" AFTER INSERT ON "rpt_summary_crossection" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_summary_crossection'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_summary_node" AFTER INSERT ON "rpt_summary_node" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_summary_node'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_summary_raingage" AFTER INSERT ON "rpt_summary_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_summary_raingage'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_summary_subcatchment" AFTER INSERT ON "rpt_summary_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_summary_subcatchment'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_timestep_critelem" AFTER INSERT ON "rpt_timestep_critelem" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_timestep_critelem'); END;
CREATE TRIGGER "trigger_insert_feature_count_rpt_warning_summary" AFTER INSERT ON "rpt_warning_summary" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('rpt_warning_summary'); END;
CREATE TRIGGER "trigger_insert_feature_count_selector_rpt_compare" AFTER INSERT ON "selector_rpt_compare" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_rpt_compare'); END;
CREATE TRIGGER "trigger_insert_feature_count_selector_rpt_compare_tstep" AFTER INSERT ON "selector_rpt_compare_tstep" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_rpt_compare_tstep'); END;
CREATE TRIGGER "trigger_insert_feature_count_selector_rpt_main" AFTER INSERT ON "selector_rpt_main" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('selector_rpt_main'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_conduits" INSTEAD OF INSERT ON "vi_conduits" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_conduits'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_subcatchments" INSTEAD OF INSERT ON "vi_subcatchments" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_subcatchments'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_outlets" INSTEAD OF INSERT ON "vi_outlets" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_outlets'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_orifices" INSTEAD OF INSERT ON "vi_orifices" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_orifices'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_weirs" INSTEAD OF INSERT ON "vi_weirs" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_weirs'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_pumps" INSTEAD OF INSERT ON "vi_pumps" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_pumps'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_outfalls" INSTEAD OF INSERT ON "vi_outfalls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_outfalls'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_dividers" INSTEAD OF INSERT ON "vi_dividers" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_dividers'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_storage" INSTEAD OF INSERT ON "vi_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_storage'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_junctions" INSTEAD OF INSERT ON "vi_junctions" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_junctions'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_raingages" INSTEAD OF INSERT ON "vi_raingages" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_raingages'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_curves" INSTEAD OF INSERT ON "vi_curves" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_curves'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_timeseries" INSTEAD OF INSERT ON "vi_timeseries" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_timeseries'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_patterns" INSTEAD OF INSERT ON "vi_patterns" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_patterns'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_landuses" INSTEAD OF INSERT ON "vi_landuses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_landuses'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_subareas" INSTEAD OF INSERT ON "vi_subareas" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_subareas'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_losses" INSTEAD OF INSERT ON "vi_losses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_losses'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_xsections" INSTEAD OF INSERT ON "vi_xsections" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_xsections'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_dwf" INSTEAD OF INSERT ON "vi_dwf" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_dwf'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_infiltration" INSTEAD OF INSERT ON "vi_infiltration" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_infiltration'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_title" INSTEAD OF INSERT ON "vi_title" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_title'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_options" INSTEAD OF INSERT ON "vi_options" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_options'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_files" INSTEAD OF INSERT ON "vi_files" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_files'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_controls" INSTEAD OF INSERT ON "vi_controls" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_controls'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_transects" INSTEAD OF INSERT ON "vi_transects" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_transects'); END;
CREATE TRIGGER "trigger_insert_feature_count_vi_inflows" INSTEAD OF INSERT ON "vi_inflows" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('vi_inflows'); END;

CREATE TRIGGER "trigger_insert_feature_count_ground" AFTER INSERT ON "ground"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('ground'); END;
CREATE TRIGGER "trigger_insert_feature_count_ground_roughness" AFTER INSERT ON "ground_roughness"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('ground_roughness'); END;
CREATE TRIGGER "trigger_insert_feature_count_ground_losses" AFTER INSERT ON "ground_losses" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('ground_losses'); END;
CREATE TRIGGER "trigger_insert_feature_count_roof" AFTER INSERT ON "roof" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('roof'); END;
CREATE TRIGGER "trigger_insert_feature_count_mesh_tin" AFTER INSERT ON "mesh_tin"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('mesh_tin'); END;
CREATE TRIGGER "trigger_insert_feature_count_mesh_roof" AFTER INSERT ON "mesh_roof"	BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('mesh_roof'); END;
CREATE TRIGGER "trigger_insert_feature_count_mesh_anchor_points" AFTER INSERT ON "mesh_anchor_points" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('mesh_anchor_points'); END;
CREATE TRIGGER "trigger_insert_feature_count_mesh_anchor_lines" AFTER INSERT ON "mesh_anchor_lines" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('mesh_anchor_lines'); END;
CREATE TRIGGER "trigger_insert_feature_count_boundary_conditions" AFTER INSERT ON "boundary_conditions" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('boundary_conditions'); END;
CREATE TRIGGER "trigger_insert_feature_count_link" AFTER INSERT ON "link" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('link'); END;
CREATE TRIGGER "trigger_insert_feature_count_gully" AFTER INSERT ON "gully" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('gully'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_raingage" AFTER INSERT ON "inp_raingage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_raingage'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_conduit" AFTER INSERT ON "inp_conduit" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_conduit'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_subcatchment" AFTER INSERT ON "inp_subcatchment" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_subcatchment'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_outlet" AFTER INSERT ON "inp_outlet" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_outlet'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_orifice" AFTER INSERT ON "inp_orifice" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_orifice'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_weir" AFTER INSERT ON "inp_weir" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_weir'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_pump" AFTER INSERT ON "inp_pump" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_pump'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_outfall" AFTER INSERT ON "inp_outfall" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_outfall'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_divider" AFTER INSERT ON "inp_divider" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_divider'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_storage" AFTER INSERT ON "inp_storage" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_storage'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_junction" AFTER INSERT ON "inp_junction" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_junction'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_dwf" AFTER INSERT ON "inp_dwf" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_dwf'); END;
CREATE TRIGGER "trigger_insert_feature_count_inp_inflow" AFTER INSERT ON "inp_inflow" BEGIN UPDATE gpkg_ogr_contents SET feature_count = feature_count + 1 WHERE lower(table_name) = lower('inp_inflow'); END;



CREATE TRIGGER "rtree_ground_geom_delete" AFTER DELETE ON "ground" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_ground_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_ground_roughness_geom_delete" AFTER DELETE ON "ground_roughness" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_ground_roughness_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_ground_losses_geom_delete" AFTER DELETE ON "ground_losses" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_ground_losses_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_roof_geom_delete" AFTER DELETE ON "roof" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_tin_geom_delete" AFTER DELETE ON "mesh_tin" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_mesh_tin_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_roof_geom_delete" AFTER DELETE ON "mesh_roof" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_mesh_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_delete" AFTER DELETE ON "mesh_anchor_points" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_mesh_anchor_points_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_delete" AFTER DELETE ON "mesh_anchor_lines" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_mesh_anchor_lines_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_boundary_conditions_geom_delete" AFTER DELETE ON "boundary_conditions" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_boundary_conditions_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_link_geom_delete" AFTER DELETE ON "link" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_gully_geom_delete" AFTER DELETE ON "gully" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_raingage_geom_delete" AFTER DELETE ON "inp_raingage" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_inp_conduit_geom_delete" AFTER DELETE ON "inp_conduit" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_delete" AFTER DELETE ON "inp_subcatchment" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outlet_geom_delete" AFTER DELETE ON "inp_outlet" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_orifice_geom_delete" AFTER DELETE ON "inp_orifice" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_weir_geom_delete" AFTER DELETE ON "inp_weir" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_pump_geom_delete" AFTER DELETE ON "inp_pump" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outfall_geom_delete" AFTER DELETE ON "inp_outfall" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_divider_geom_delete" AFTER DELETE ON "inp_divider" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_storage_geom_delete" AFTER DELETE ON "inp_storage" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_junction_geom_delete" AFTER DELETE ON "inp_junction" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_dwf_geom_delete" AFTER DELETE ON "inp_dwf" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_dwf_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_inflow_geom_delete" AFTER DELETE ON "inp_inflow" WHEN (old."geom" NOT NULL) BEGIN DELETE FROM "rtree_inp_inflow_geom" WHERE id = OLD."fid"; END;

CREATE TRIGGER "rtree_ground_geom_insert" AFTER INSERT ON "ground" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_ground_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_ground_roughness_geom_insert" AFTER INSERT ON "ground_roughness" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_ground_roughness_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_ground_losses_geom_insert" AFTER INSERT ON "ground_losses" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_ground_losses_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_roof_geom_insert" AFTER INSERT ON "roof" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_mesh_tin_geom_insert" AFTER INSERT ON "mesh_tin" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_mesh_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_mesh_roof_geom_insert" AFTER INSERT ON "mesh_roof" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_mesh_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_insert" AFTER INSERT ON "mesh_anchor_points" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_mesh_anchor_points_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_insert" AFTER INSERT ON "mesh_anchor_lines" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_mesh_anchor_lines_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_boundary_conditions_geom_insert" AFTER INSERT ON "boundary_conditions" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_boundary_conditions_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_link_geom_insert" AFTER INSERT ON "link" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_gully_geom_insert" AFTER INSERT ON "gully" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_raingage_geom_insert" AFTER INSERT ON "inp_raingage" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_conduit_geom_insert" AFTER INSERT ON "inp_conduit" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_insert" AFTER INSERT ON "inp_subcatchment" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_outlet_geom_insert" AFTER INSERT ON "inp_outlet" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_orifice_geom_insert" AFTER INSERT ON "inp_orifice" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_weir_geom_insert" AFTER INSERT ON "inp_weir" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_pump_geom_insert" AFTER INSERT ON "inp_pump" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_outfall_geom_insert" AFTER INSERT ON "inp_outfall" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_divider_geom_insert" AFTER INSERT ON "inp_divider" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_storage_geom_insert" AFTER INSERT ON "inp_storage" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_junction_geom_insert" AFTER INSERT ON "inp_junction" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_dwf_geom_insert" AFTER INSERT ON "inp_dwf" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_dwf_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;
CREATE TRIGGER "rtree_inp_inflow_geom_insert" AFTER INSERT ON "inp_inflow" WHEN (new."geom" NOT NULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_inflow_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom") ); END;

CREATE TRIGGER "rtree_ground_geom_update1" AFTER UPDATE OF "geom" ON "ground" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_ground_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_ground_roughness_geom_update1" AFTER UPDATE OF "geom" ON "ground_roughness" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_ground_roughness_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_ground_losses_geom_update1" AFTER UPDATE OF "geom" ON "ground_losses" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_ground_losses_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_roof_geom_update1" AFTER UPDATE OF "geom" ON "roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_tin_geom_update1" AFTER UPDATE OF "geom" ON "mesh_tin" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_mesh_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_roof_geom_update1" AFTER UPDATE OF "geom" ON "mesh_roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_mesh_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_update1" AFTER UPDATE OF "geom" ON "mesh_anchor_points" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_mesh_anchor_points_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_update1" AFTER UPDATE OF "geom" ON "mesh_anchor_lines" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_mesh_anchor_lines_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_boundary_conditions_geom_update1" AFTER UPDATE OF "geom" ON "mesh_anchor_lines" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_boundary_conditions_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_link_geom_update1" AFTER UPDATE OF "geom" ON "link" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_gully_geom_update1" AFTER UPDATE OF "geom" ON "gully" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update1" AFTER UPDATE OF "geom" ON "inp_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update1" AFTER UPDATE OF "geom" ON "inp_conduit" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update1" AFTER UPDATE OF "geom" ON "inp_subcatchment" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update1" AFTER UPDATE OF "geom" ON "inp_outlet" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update1" AFTER UPDATE OF "geom" ON "inp_orifice" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_weir_geom_update1" AFTER UPDATE OF "geom" ON "inp_weir" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_pump_geom_update1" AFTER UPDATE OF "geom" ON "inp_pump" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update1" AFTER UPDATE OF "geom" ON "inp_outfall" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_divider_geom_update1" AFTER UPDATE OF "geom" ON "inp_divider" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_storage_geom_update1" AFTER UPDATE OF "geom" ON "inp_storage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_junction_geom_update1" AFTER UPDATE OF "geom" ON "inp_junction" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_dwf_geom_update1" AFTER UPDATE OF "geom" ON "inp_dwf" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_dwf_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_inflow_geom_update1" AFTER UPDATE OF "geom" ON "inp_inflow" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN INSERT OR REPLACE INTO "rtree_inp_inflow_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;

CREATE TRIGGER "rtree_ground_geom_update2" AFTER UPDATE OF "geom" ON "ground" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_ground_roughness_geom_update2" AFTER UPDATE OF "geom" ON "ground_roughness" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_roughness_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_ground_losses_geom_update2" AFTER UPDATE OF "geom" ON "ground_losses" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_losses_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_roof_geom_update2" AFTER UPDATE OF "geom" ON "roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_tin_geom_update2" AFTER UPDATE OF "geom" ON "mesh_tin" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_tin_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_roof_geom_update2" AFTER UPDATE OF "geom" ON "mesh_roof" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_roof_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_update2" AFTER UPDATE OF "geom" ON "mesh_anchor_points" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_points_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_update2" AFTER UPDATE OF "geom" ON "mesh_anchor_lines" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_lines_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_boundary_conditions_geom_update2" AFTER UPDATE OF "geom" ON "boundary_conditions" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_boundary_conditions_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_link_geom_update2" AFTER UPDATE OF "geom" ON "link" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_gully_geom_update2" AFTER UPDATE OF "geom" ON "gully" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_raingage_geom_update2" AFTER UPDATE OF "geom" ON "inp_raingage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id= OLD."fid"; END;
CREATE TRIGGER "rtree_inp_conduit_geom_update2" AFTER UPDATE OF "geom" ON "inp_conduit" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update2" AFTER UPDATE OF "geom" ON "inp_subcatchment" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outlet_geom_update2" AFTER UPDATE OF "geom" ON "inp_outlet" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_orifice_geom_update2" AFTER UPDATE OF "geom" ON "inp_orifice" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_weir_geom_update2" AFTER UPDATE OF "geom" ON "inp_weir" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_pump_geom_update2" AFTER UPDATE OF "geom" ON "inp_pump" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_outfall_geom_update2" AFTER UPDATE OF "geom" ON "inp_outfall" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_divider_geom_update2" AFTER UPDATE OF "geom" ON "inp_divider" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_storage_geom_update2" AFTER UPDATE OF "geom" ON "inp_storage" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_junction_geom_update2" AFTER UPDATE OF "geom" ON "inp_junction" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_dwf_geom_update2" AFTER UPDATE OF "geom" ON "inp_dwf" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_dwf_geom" WHERE id = OLD."fid"; END;
CREATE TRIGGER "rtree_inp_inflow_geom_update2" AFTER UPDATE OF "geom" ON "inp_inflow" WHEN OLD."fid" = NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_inflow_geom" WHERE id = OLD."fid"; END;

CREATE TRIGGER "rtree_ground_geom_update3" AFTER UPDATE ON "ground" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_ground_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_ground_roughness_geom_update3" AFTER UPDATE ON "ground_roughness" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_roughness_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_ground_roughness_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_ground_losses_geom_update3" AFTER UPDATE ON "ground_losses" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_losses_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_ground_losses_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_roof_geom_update3" AFTER UPDATE ON "roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_roof_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_tin_geom_update3" AFTER UPDATE ON "mesh_tin" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_tin_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_mesh_tin_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_roof_geom_update3" AFTER UPDATE ON "mesh_roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_roof_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_mesh_roof_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_update3" AFTER UPDATE ON "mesh_anchor_points" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_points_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_mesh_anchor_points_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_update3" AFTER UPDATE ON "mesh_anchor_lines" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_lines_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_mesh_anchor_lines_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_boundary_conditions_geom_update3" AFTER UPDATE ON "boundary_conditions" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_boundary_conditions_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_boundary_conditions_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_link_geom_update3" AFTER UPDATE ON "link" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_link_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_gully_geom_update3" AFTER UPDATE ON "gully" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_gully_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update3" AFTER UPDATE ON "inp_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id= OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_raingage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update3" AFTER UPDATE ON "inp_conduit" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_conduit_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update3" AFTER UPDATE ON"inp_subcatchment" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_subcatchment_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update3" AFTER UPDATE ON "inp_outlet" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_outlet_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update3" AFTER UPDATE ON "inp_orifice" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_orifice_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_weir_geom_update3" AFTER UPDATE ON "inp_weir" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_weir_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_pump_geom_update3" AFTER UPDATE ON "inp_pump" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_pump_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update3" AFTER UPDATE ON "inp_outfall" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_outfall_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_divider_geom_update3" AFTER UPDATE ON "inp_divider" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_divider_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_storage_geom_update3" AFTER UPDATE ON "inp_storage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_storage_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_junction_geom_update3" AFTER UPDATE ON "inp_junction" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_junction_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_dwf_geom_update3" AFTER UPDATE ON "inp_dwf" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_dwf_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_dwf_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;
CREATE TRIGGER "rtree_inp_inflow_geom_update3" AFTER UPDATE ON "inp_inflow" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" NOTNULL AND NOT ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_inflow_geom" WHERE id = OLD."fid"; INSERT OR REPLACE INTO "rtree_inp_inflow_geom" VALUES (NEW."fid", ST_MinX(NEW."geom"), ST_MaxX(NEW."geom"), ST_MinY(NEW."geom"), ST_MaxY(NEW."geom")); END;

CREATE TRIGGER "rtree_ground_geom_update4" AFTER UPDATE ON "ground" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_ground_roughness_geom_update4" AFTER UPDATE ON "ground_roughness" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_roughness_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_ground_losses_geom_update4" AFTER UPDATE ON "ground_losses" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_ground_losses_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_roof_geom_update4" AFTER UPDATE ON "roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_roof_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_mesh_tin_geom_update4" AFTER UPDATE ON "mesh_tin" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_tin_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_mesh_roof_geom_update4" AFTER UPDATE ON "mesh_roof" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_roof_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_mesh_anchor_points_geom_update4" AFTER UPDATE ON "mesh_anchor_points" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_points_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_mesh_anchor_lines_geom_update4" AFTER UPDATE ON "mesh_anchor_lines" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_mesh_anchor_lines_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_boundary_conditions_geom_update4" AFTER UPDATE ON "mesh_anchor_lines" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_boundary_conditions_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_link_geom_update4" AFTER UPDATE ON "link" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_link_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_gully_geom_update4" AFTER UPDATE ON "gully" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_gully_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_raingage_geom_update4" AFTER UPDATE ON "inp_raingage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom") ) BEGIN DELETE FROM "rtree_inp_raingage_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_conduit_geom_update4" AFTER UPDATE ON "inp_conduit" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_conduit_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_subcatchment_geom_update4" AFTER UPDATE ON "inp_subcatchment" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_subcatchment_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_outlet_geom_update4" AFTER UPDATE ON "inp_outlet" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outlet_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_orifice_geom_update4" AFTER UPDATE ON "inp_orifice" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_orifice_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_weir_geom_update4" AFTER UPDATE ON "inp_weir" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_weir_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_pump_geom_update4" AFTER UPDATE ON "inp_pump" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_pump_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_outfall_geom_update4" AFTER UPDATE ON "inp_outfall" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_outfall_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_divider_geom_update4" AFTER UPDATE ON "inp_divider" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_divider_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_storage_geom_update4" AFTER UPDATE ON "inp_storage" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_storage_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_junction_geom_update4" AFTER UPDATE ON "inp_junction" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_junction_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_dwf_geom_update4" AFTER UPDATE ON "inp_dwf" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_dwf_geom" WHERE id IN (OLD."fid", NEW."fid"); END;
CREATE TRIGGER "rtree_inp_inflow_geom_update4" AFTER UPDATE ON "inp_inflow" WHEN OLD."fid" != NEW."fid" AND (NEW."geom" ISNULL OR ST_IsEmpty(NEW."geom")) BEGIN DELETE FROM "rtree_inp_inflow_geom" WHERE id IN (OLD."fid", NEW."fid"); END;



---------------------------------------------------
-- TRIGGERS TO CREATE AN AUTOINDEX FOR EACH ELEMENT
-- ------------------------------------------------
create trigger "trigger_update_subc_id_inp_subcatchment" after insert on "inp_subcatchment" BEGIN update inp_subcatchment set subc_id = 'H'||fid; END;
create trigger "trigger_update_rg_id_inp_raingage" after insert on "inp_raingage" BEGIN update inp_raingage set rg_id = 'RG'||fid; END;

create trigger "trigger_update_arc_id_inp_outlet" after insert on "inp_outlet" BEGIN update inp_outlet set arc_id = 'T'||fid; END;
create trigger "trigger_update_arc_id_inp_weir" after insert on "inp_weir" BEGIN update inp_weir set arc_id = 'W'||fid; END;
create trigger "trigger_update_arc_id_inp_orifice" after insert on "inp_orifice" BEGIN update inp_orifice set arc_id = 'R'||fid; END;
create trigger "trigger_update_arc_id_inp_pump" after insert on "inp_pump" BEGIN update inp_pump set arc_id = 'P'||fid; END;
create trigger "trigger_update_arc_id_inp_conduit" after insert on "inp_conduit" BEGIN update inp_conduit set arc_id = 'C'||fid; END;
create trigger "trigger_update_node_id_inp_storage" after insert on "inp_storage" BEGIN update inp_storage set node_id = 'S'||fid; END;
create trigger "trigger_update_node_id_inp_junction" after insert on "inp_junction" BEGIN update inp_junction set node_id = 'J'||fid; END;
create trigger "trigger_update_node_id_inp_outfall" after insert on "inp_outfall" BEGIN update inp_outfall set node_id = 'O'||fid; END;
create trigger "trigger_update_node_id_inp_divider" after insert on "inp_divider" BEGIN update inp_divider set node_id = 'D'||fid; END;




-- -------------------
-- ENABLE FOREIGN KEYS: enables insertion of data without using any restriction
-- -------------------

PRAGMA foreign_keys = ON;
